static const uint8_t sc_radianceSource[17834] =
{
	0x2f, 0x2a, 0x0d, 0x0a, 0x20, 0x2a, 0x20, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, // /*.. * Copyright
	0x20, 0x32, 0x30, 0x31, 0x34, 0x2d, 0x32, 0x30, 0x31, 0x35, 0x20, 0x44, 0x61, 0x72, 0x69, 0x6f, //  2014-2015 Dario
	0x20, 0x4d, 0x61, 0x6e, 0x65, 0x73, 0x6b, 0x75, 0x2e, 0x20, 0x41, 0x6c, 0x6c, 0x20, 0x72, 0x69, //  Manesku. All ri
	0x67, 0x68, 0x74, 0x73, 0x20, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2e, 0x0d, 0x0a, // ghts reserved...
	0x20, 0x2a, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x3a, 0x20, 0x68, 0x74, 0x74, 0x70, //  * License: http
	0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, // ://www.opensourc
	0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x42, // e.org/licenses/B
	0x53, 0x44, 0x2d, 0x32, 0x2d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x0d, 0x0a, 0x20, 0x2a, 0x2f, // SD-2-Clause.. */
	0x0d, 0x0a, 0x0d, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x64, 0x65, 0x66, 0x20, 0x75, 0x6e, 0x73, 0x69, // ....typedef unsi
	0x67, 0x6e, 0x65, 0x64, 0x20, 0x63, 0x68, 0x61, 0x72, 0x20, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x38, // gned char  uint8
	0x5f, 0x74, 0x3b, 0x0d, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x64, 0x65, 0x66, 0x20, 0x75, 0x6e, 0x73, // _t;..typedef uns
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x20, 0x75, 0x69, 0x6e, 0x74, // igned short uint
	0x31, 0x36, 0x5f, 0x74, 0x3b, 0x0d, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x64, 0x65, 0x66, 0x20, 0x75, // 16_t;..typedef u
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x20, 0x20, 0x75, 0x69, // nsigned int   ui
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x3b, 0x0d, 0x0a, 0x0d, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x64, // nt32_t;....typed
	0x65, 0x66, 0x20, 0x63, 0x68, 0x61, 0x72, 0x20, 0x20, 0x69, 0x6e, 0x74, 0x38, 0x5f, 0x74, 0x3b, // ef char  int8_t;
	0x0d, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x64, 0x65, 0x66, 0x20, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x20, // ..typedef short
	0x69, 0x6e, 0x74, 0x31, 0x36, 0x5f, 0x74, 0x3b, 0x0d, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x64, 0x65, // int16_t;..typede
	0x66, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x20, 0x20, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x3b, // f int   int32_t;
	0x0d, 0x0a, 0x0d, 0x0a, 0x5f, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x73, // ....__constant s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x20, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // ampler_t s_sampl
	0x65, 0x72, 0x20, 0x3d, 0x20, 0x43, 0x4c, 0x4b, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x49, // er = CLK_NORMALI
	0x5a, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x53, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, // ZED_COORDS_FALSE
	0x20, 0x7c, 0x20, 0x43, 0x4c, 0x4b, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4e, //  | CLK_ADDRESS_N
	0x4f, 0x4e, 0x45, 0x20, 0x7c, 0x20, 0x43, 0x4c, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, // ONE | CLK_FILTER
	0x5f, 0x4e, 0x45, 0x41, 0x52, 0x45, 0x53, 0x54, 0x3b, 0x0d, 0x0a, 0x0d, 0x0a, 0x5f, 0x5f, 0x63, // _NEAREST;....__c
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x73, // onstant float4 s
	0x5f, 0x66, 0x61, 0x63, 0x65, 0x55, 0x76, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5b, 0x36, // _faceUvVectors[6
	0x5d, 0x5b, 0x33, 0x5d, 0x20, 0x3d, 0x0d, 0x0a, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, // ][3] =..{..    {
	0x20, 0x2f, 0x2f, 0x20, 0x2b, 0x78, 0x20, 0x66, 0x61, 0x63, 0x65, 0x0d, 0x0a, 0x20, 0x20, 0x20, //  // +x face..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, //      {  0.0f,  0
	0x2e, 0x30, 0x66, 0x2c, 0x20, 0x2d, 0x31, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, // .0f, -1.0f, 0.0f
	0x20, 0x7d, 0x2c, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x20, 0x2d, 0x3e, 0x20, 0x2d, 0x7a, 0x0d, 0x0a, //  }, // u -> -z..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, //         {  0.0f,
	0x20, 0x2d, 0x31, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, //  -1.0f,  0.0f, 0
	0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x20, 0x2f, 0x2f, 0x20, 0x76, 0x20, 0x2d, 0x3e, 0x20, 0x2d, // .0f }, // v -> -
	0x79, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x20, 0x31, 0x2e, // y..        {  1.
	0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, // 0f,  0.0f,  0.0f
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x20, 0x2f, 0x2f, 0x20, 0x2b, 0x78, 0x20, // , 0.0f }, // +x
	0x66, 0x61, 0x63, 0x65, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0d, 0x0a, 0x20, 0x20, // face..    },..
	0x20, 0x20, 0x7b, 0x20, 0x2f, 0x2f, 0x20, 0x2d, 0x78, 0x20, 0x66, 0x61, 0x63, 0x65, 0x0d, 0x0a, //   { // -x face..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, //         {  0.0f,
	0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, //   0.0f,  1.0f, 0
	0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x20, 0x2d, 0x3e, 0x20, 0x2b, // .0f }, // u -> +
	0x7a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x20, 0x30, 0x2e, // z..        {  0.
	0x30, 0x66, 0x2c, 0x20, 0x2d, 0x31, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, // 0f, -1.0f,  0.0f
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x20, 0x2f, 0x2f, 0x20, 0x76, 0x20, 0x2d, // , 0.0f }, // v -
	0x3e, 0x20, 0x2d, 0x79, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, // > -y..        {
	0x2d, 0x31, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, // -1.0f,  0.0f,  0
	0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x20, 0x2f, 0x2f, 0x20, // .0f, 0.0f }, //
	0x2d, 0x78, 0x20, 0x66, 0x61, 0x63, 0x65, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0d, // -x face..    },.
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x2f, 0x2f, 0x20, 0x2b, 0x79, 0x20, 0x66, 0x61, 0x63, // .    { // +y fac
	0x65, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x20, 0x31, 0x2e, // e..        {  1.
	0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, // 0f,  0.0f,  0.0f
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x20, 0x2d, // , 0.0f }, // u -
	0x3e, 0x20, 0x2b, 0x78, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, // > +x..        {
	0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x31, //  0.0f,  0.0f,  1
	0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x20, 0x2f, 0x2f, 0x20, // .0f, 0.0f }, //
	0x76, 0x20, 0x2d, 0x3e, 0x20, 0x2b, 0x7a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // v -> +z..
	0x20, 0x7b, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x2c, //  {  0.0f,  1.0f,
	0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x20, //   0.0f, 0.0f },
	0x2f, 0x2f, 0x20, 0x2b, 0x79, 0x20, 0x66, 0x61, 0x63, 0x65, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, // // +y face..
	0x7d, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x2f, 0x2f, 0x20, 0x2d, 0x79, 0x20, // },..    { // -y
	0x66, 0x61, 0x63, 0x65, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, // face..        {
	0x20, 0x31, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, //  1.0f,  0.0f,  0
	0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x20, 0x2f, 0x2f, 0x20, // .0f, 0.0f }, //
	0x75, 0x20, 0x2d, 0x3e, 0x20, 0x2b, 0x78, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // u -> +x..
	0x20, 0x7b, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, //  {  0.0f,  0.0f,
	0x20, 0x2d, 0x31, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x20, //  -1.0f, 0.0f },
	0x2f, 0x2f, 0x20, 0x76, 0x20, 0x2d, 0x3e, 0x20, 0x2d, 0x7a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, // // v -> -z..
	0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x2d, 0x31, 0x2e, //     {  0.0f, -1.
	0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, // 0f,  0.0f, 0.0f
	0x7d, 0x2c, 0x20, 0x2f, 0x2f, 0x20, 0x2d, 0x79, 0x20, 0x66, 0x61, 0x63, 0x65, 0x0d, 0x0a, 0x20, // }, // -y face..
	0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x2f, 0x2f, 0x20, //    },..    { //
	0x2b, 0x7a, 0x20, 0x66, 0x61, 0x63, 0x65, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // +z face..
	0x20, 0x7b, 0x20, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, //  {  1.0f,  0.0f,
	0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x20, //   0.0f, 0.0f },
	0x2f, 0x2f, 0x20, 0x75, 0x20, 0x2d, 0x3e, 0x20, 0x2b, 0x78, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, // // u -> +x..
	0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x2d, 0x31, 0x2e, //     {  0.0f, -1.
	0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, // 0f,  0.0f, 0.0f
	0x7d, 0x2c, 0x20, 0x2f, 0x2f, 0x20, 0x76, 0x20, 0x2d, 0x3e, 0x20, 0x2d, 0x79, 0x0d, 0x0a, 0x20, // }, // v -> -y..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, //        {  0.0f,
	0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, //  0.0f,  1.0f, 0.
	0x30, 0x66, 0x20, 0x7d, 0x2c, 0x20, 0x2f, 0x2f, 0x20, 0x2b, 0x7a, 0x20, 0x66, 0x61, 0x63, 0x65, // 0f }, // +z face
	0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, // ..    },..    {
	0x2f, 0x2f, 0x20, 0x2d, 0x7a, 0x20, 0x66, 0x61, 0x63, 0x65, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, // // -z face..
	0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x2d, 0x31, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, //     { -1.0f,  0.
	0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, // 0f,  0.0f, 0.0f
	0x7d, 0x2c, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x20, 0x2d, 0x3e, 0x20, 0x2d, 0x78, 0x0d, 0x0a, 0x20, // }, // u -> -x..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, //        {  0.0f,
	0x2d, 0x31, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, // -1.0f,  0.0f, 0.
	0x30, 0x66, 0x20, 0x7d, 0x2c, 0x20, 0x2f, 0x2f, 0x20, 0x76, 0x20, 0x2d, 0x3e, 0x20, 0x2d, 0x79, // 0f }, // v -> -y
	0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x20, 0x30, 0x2e, 0x30, // ..        {  0.0
	0x66, 0x2c, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x2d, 0x31, 0x2e, 0x30, 0x66, 0x2c, // f,  0.0f, -1.0f,
	0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x20, 0x2f, 0x2f, 0x20, 0x2d, 0x7a, 0x20, 0x66, //  0.0f }, // -z f
	0x61, 0x63, 0x65, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0d, 0x0a, 0x7d, 0x3b, 0x0d, 0x0a, // ace..    }..};..
	0x0d, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, // ..static float4
	0x74, 0x65, 0x78, 0x65, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x56, 0x65, 0x63, 0x57, // texelCoordToVecW
	0x61, 0x72, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x75, 0x2c, 0x20, 0x66, 0x6c, // arp(float _u, fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x76, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x38, 0x5f, 0x74, 0x20, 0x5f, // oat _v, int8_t _
	0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // faceIdx, float _
	0x77, 0x61, 0x72, 0x70, 0x29, 0x0d, 0x0a, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x23, 0x69, // warp)..{..    #i
	0x66, 0x64, 0x65, 0x66, 0x20, 0x57, 0x41, 0x52, 0x50, 0x5f, 0x46, 0x49, 0x58, 0x55, 0x50, 0x0d, // fdef WARP_FIXUP.
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x75, 0x20, 0x3d, 0x20, 0x5f, 0x77, // .        _u = _w
	0x61, 0x72, 0x70, 0x2a, 0x28, 0x5f, 0x75, 0x2a, 0x5f, 0x75, 0x2a, 0x5f, 0x75, 0x29, 0x20, 0x2b, // arp*(_u*_u*_u) +
	0x20, 0x5f, 0x75, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x76, //  _u;..        _v
	0x20, 0x3d, 0x20, 0x5f, 0x77, 0x61, 0x72, 0x70, 0x2a, 0x28, 0x5f, 0x76, 0x2a, 0x5f, 0x76, 0x2a, //  = _warp*(_v*_v*
	0x5f, 0x76, 0x29, 0x20, 0x2b, 0x20, 0x5f, 0x76, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x23, // _v) + _v;..    #
	0x65, 0x6e, 0x64, 0x69, 0x66, 0x20, 0x2f, 0x2f, 0x57, 0x41, 0x52, 0x50, 0x5f, 0x46, 0x49, 0x58, // endif //WARP_FIX
	0x55, 0x50, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // UP....    float4
	0x20, 0x61, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x55, 0x76, 0x56, 0x65, //  aa = s_faceUvVe
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x5b, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x5d, 0x5b, // ctors[_faceIdx][
	0x30, 0x5d, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, // 0];..    float4
	0x62, 0x62, 0x20, 0x3d, 0x20, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x55, 0x76, 0x56, 0x65, 0x63, // bb = s_faceUvVec
	0x74, 0x6f, 0x72, 0x73, 0x5b, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x5d, 0x5b, 0x31, // tors[_faceIdx][1
	0x5d, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x63, // ];..    float4 c
	0x63, 0x20, 0x3d, 0x20, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x55, 0x76, 0x56, 0x65, 0x63, 0x74, // c = s_faceUvVect
	0x6f, 0x72, 0x73, 0x5b, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x5d, 0x5b, 0x32, 0x5d, // ors[_faceIdx][2]
	0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6e, 0x6f, // ;..    return no
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x28, 0x5f, 0x75, 0x2a, 0x61, 0x61, 0x20, 0x2b, 0x20, // rmalize(_u*aa +
	0x5f, 0x76, 0x2a, 0x62, 0x62, 0x20, 0x2b, 0x20, 0x63, 0x63, 0x29, 0x3b, 0x0d, 0x0a, 0x7d, 0x0d, // _v*bb + cc);..}.
	0x0a, 0x0d, 0x0a, 0x23, 0x69, 0x66, 0x20, 0x21, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x43, 0x4f, 0x4d, // ...#if !CMFT_COM
	0x50, 0x55, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x52, 0x45, 0x41, // PUTE_FILTER_AREA
	0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x50, 0x55, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x61, // _ON_CPU..    sta
	0x74, 0x69, 0x63, 0x20, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x61, 0x61, 0x62, 0x62, 0x41, 0x64, 0x64, // tic void aabbAdd
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x2a, 0x20, 0x5f, 0x61, 0x61, 0x62, 0x62, 0x2c, 0x20, // (float4* _aabb,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // float _x, float
	0x5f, 0x79, 0x29, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, // _y)..    {..
	0x20, 0x20, 0x20, 0x20, 0x5f, 0x61, 0x61, 0x62, 0x62, 0x2d, 0x3e, 0x78, 0x20, 0x3d, 0x20, 0x66, //     _aabb->x = f
	0x6d, 0x69, 0x6e, 0x28, 0x5f, 0x61, 0x61, 0x62, 0x62, 0x2d, 0x3e, 0x78, 0x2c, 0x20, 0x5f, 0x78, // min(_aabb->x, _x
	0x29, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x61, 0x61, 0x62, // );..        _aab
	0x62, 0x2d, 0x3e, 0x79, 0x20, 0x3d, 0x20, 0x66, 0x6d, 0x69, 0x6e, 0x28, 0x5f, 0x61, 0x61, 0x62, // b->y = fmin(_aab
	0x62, 0x2d, 0x3e, 0x79, 0x2c, 0x20, 0x5f, 0x79, 0x29, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, // b->y, _y);..
	0x20, 0x20, 0x20, 0x20, 0x5f, 0x61, 0x61, 0x62, 0x62, 0x2d, 0x3e, 0x7a, 0x20, 0x3d, 0x20, 0x66, //     _aabb->z = f
	0x6d, 0x61, 0x78, 0x28, 0x5f, 0x61, 0x61, 0x62, 0x62, 0x2d, 0x3e, 0x7a, 0x2c, 0x20, 0x5f, 0x78, // max(_aabb->z, _x
	0x29, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x61, 0x61, 0x62, // );..        _aab
	0x62, 0x2d, 0x3e, 0x77, 0x20, 0x3d, 0x20, 0x66, 0x6d, 0x61, 0x78, 0x28, 0x5f, 0x61, 0x61, 0x62, // b->w = fmax(_aab
	0x62, 0x2d, 0x3e, 0x77, 0x2c, 0x20, 0x5f, 0x79, 0x29, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, // b->w, _y);..
	0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, // }....    static
	0x76, 0x6f, 0x69, 0x64, 0x20, 0x61, 0x61, 0x62, 0x62, 0x43, 0x6c, 0x61, 0x6d, 0x70, 0x28, 0x66, // void aabbClamp(f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x2a, 0x20, 0x5f, 0x61, 0x61, 0x62, 0x62, 0x2c, 0x20, 0x66, 0x6c, // loat4* _aabb, fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x6d, 0x69, 0x6e, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // oat _min, float
	0x5f, 0x6d, 0x61, 0x78, 0x29, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, // _max)..    {..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x61, 0x61, 0x62, 0x62, 0x2d, 0x3e, 0x78, 0x20, 0x3d, //       _aabb->x =
	0x20, 0x66, 0x6d, 0x61, 0x78, 0x28, 0x5f, 0x61, 0x61, 0x62, 0x62, 0x2d, 0x3e, 0x78, 0x2c, 0x20, //  fmax(_aabb->x,
	0x5f, 0x6d, 0x69, 0x6e, 0x29, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // _min);..
	0x5f, 0x61, 0x61, 0x62, 0x62, 0x2d, 0x3e, 0x79, 0x20, 0x3d, 0x20, 0x66, 0x6d, 0x61, 0x78, 0x28, // _aabb->y = fmax(
	0x5f, 0x61, 0x61, 0x62, 0x62, 0x2d, 0x3e, 0x79, 0x2c, 0x20, 0x5f, 0x6d, 0x69, 0x6e, 0x29, 0x3b, // _aabb->y, _min);
	0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x61, 0x61, 0x62, 0x62, 0x2d, // ..        _aabb-
	0x3e, 0x7a, 0x20, 0x3d, 0x20, 0x66, 0x6d, 0x69, 0x6e, 0x28, 0x5f, 0x61, 0x61, 0x62, 0x62, 0x2d, // >z = fmin(_aabb-
	0x3e, 0x7a, 0x2c, 0x20, 0x5f, 0x6d, 0x61, 0x78, 0x29, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, // >z, _max);..
	0x20, 0x20, 0x20, 0x20, 0x5f, 0x61, 0x61, 0x62, 0x62, 0x2d, 0x3e, 0x77, 0x20, 0x3d, 0x20, 0x66, //     _aabb->w = f
	0x6d, 0x69, 0x6e, 0x28, 0x5f, 0x61, 0x61, 0x62, 0x62, 0x2d, 0x3e, 0x77, 0x2c, 0x20, 0x5f, 0x6d, // min(_aabb->w, _m
	0x61, 0x78, 0x29, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, // ax);..    }....
	0x20, 0x20, 0x20, 0x65, 0x6e, 0x75, 0x6d, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0d, 0x0a, //    enum..    {..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, //         CMFT_FAC
	0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x58, 0x20, 0x3d, 0x20, 0x30, 0x2c, 0x0d, 0x0a, 0x20, 0x20, // E_POS_X = 0,..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, //       CMFT_FACE_
	0x4e, 0x45, 0x47, 0x5f, 0x58, 0x20, 0x3d, 0x20, 0x31, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, // NEG_X = 1,..
	0x20, 0x20, 0x20, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x4f, //     CMFT_FACE_PO
	0x53, 0x5f, 0x59, 0x20, 0x3d, 0x20, 0x32, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // S_Y = 2,..
	0x20, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x5f, //   CMFT_FACE_NEG_
	0x59, 0x20, 0x3d, 0x20, 0x33, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // Y = 3,..
	0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x5a, 0x20, // CMFT_FACE_POS_Z
	0x3d, 0x20, 0x34, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x4d, // = 4,..        CM
	0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x5a, 0x20, 0x3d, 0x20, // FT_FACE_NEG_Z =
	0x35, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x3b, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, // 5,..    };....
	0x20, 0x20, 0x65, 0x6e, 0x75, 0x6d, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0d, 0x0a, 0x20, //   enum..    {..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, //        CMFT_EDGE
	0x5f, 0x4c, 0x45, 0x46, 0x54, 0x20, 0x20, 0x20, 0x3d, 0x20, 0x30, 0x2c, 0x0d, 0x0a, 0x20, 0x20, // _LEFT   = 0,..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, //       CMFT_EDGE_
	0x52, 0x49, 0x47, 0x48, 0x54, 0x20, 0x20, 0x3d, 0x20, 0x31, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, // RIGHT  = 1,..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x54, //      CMFT_EDGE_T
	0x4f, 0x50, 0x20, 0x20, 0x20, 0x20, 0x3d, 0x20, 0x32, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, // OP    = 2,..
	0x20, 0x20, 0x20, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x42, 0x4f, //     CMFT_EDGE_BO
	0x54, 0x54, 0x4f, 0x4d, 0x20, 0x3d, 0x20, 0x33, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, // TTOM = 3,..    }
	0x3b, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, // ;....    __const
	0x61, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x43, 0x75, 0x62, 0x65, 0x46, // ant struct CubeF
	0x61, 0x63, 0x65, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x0d, 0x0a, 0x20, 0x20, // aceNeighbour..
	0x20, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x75, 0x69, 0x6e, //   {..        uin
	0x74, 0x38, 0x5f, 0x74, 0x20, 0x6d, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x3b, 0x0d, // t8_t m_faceIdx;.
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x5f, 0x74, // .        uint8_t
	0x20, 0x6d, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x45, 0x64, 0x67, 0x65, 0x3b, 0x0d, 0x0a, 0x20, 0x20, //  m_faceEdge;..
	0x20, 0x20, 0x7d, 0x20, 0x73, 0x5f, 0x63, 0x75, 0x62, 0x65, 0x46, 0x61, 0x63, 0x65, 0x4e, 0x65, //   } s_cubeFaceNe
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x73, 0x5b, 0x36, 0x5d, 0x5b, 0x34, 0x5d, 0x20, 0x3d, // ighbours[6][4] =
	0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ..    {..
	0x20, 0x7b, 0x20, 0x2f, 0x2f, 0x50, 0x4f, 0x53, 0x5f, 0x58, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, //  { //POS_X..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, //         { CMFT_F
	0x41, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x5a, 0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, // ACE_POS_Z, CMFT_
	0x45, 0x44, 0x47, 0x45, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x20, 0x7d, 0x2c, 0x0d, 0x0a, 0x20, // EDGE_RIGHT },..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, //            { CMF
	0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x5a, 0x2c, 0x20, 0x43, 0x4d, // T_FACE_NEG_Z, CM
	0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x20, 0x20, 0x7d, 0x2c, // FT_EDGE_LEFT  },
	0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, // ..            {
	0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x59, 0x2c, // CMFT_FACE_POS_Y,
	0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, //  CMFT_EDGE_RIGHT
	0x20, 0x7d, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  },..
	0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x47, //  { CMFT_FACE_NEG
	0x5f, 0x59, 0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x52, 0x49, // _Y, CMFT_EDGE_RI
	0x47, 0x48, 0x54, 0x20, 0x7d, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // GHT },..
	0x7d, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x2f, 0x2f, // },..        { //
	0x4e, 0x45, 0x47, 0x5f, 0x58, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // NEG_X..
	0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, //    { CMFT_FACE_N
	0x45, 0x47, 0x5f, 0x5a, 0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, // EG_Z, CMFT_EDGE_
	0x52, 0x49, 0x47, 0x48, 0x54, 0x20, 0x7d, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // RIGHT },..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, //       { CMFT_FAC
	0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x5a, 0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, // E_POS_Z, CMFT_ED
	0x47, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x20, 0x20, 0x7d, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, // GE_LEFT  },..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, //          { CMFT_
	0x46, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x59, 0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, // FACE_POS_Y, CMFT
	0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x20, 0x20, 0x7d, 0x2c, 0x0d, 0x0a, // _EDGE_LEFT  },..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, //             { CM
	0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x59, 0x2c, 0x20, 0x43, // FT_FACE_NEG_Y, C
	0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x20, 0x20, 0x7d, // MFT_EDGE_LEFT  }
	0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0d, 0x0a, 0x20, // ,..        },..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x2f, 0x2f, 0x50, 0x4f, 0x53, 0x5f, 0x59, //        { //POS_Y
	0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, // ..            {
	0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x58, 0x2c, // CMFT_FACE_NEG_X,
	0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x20, 0x7d, //  CMFT_EDGE_TOP }
	0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, // ,..            {
	0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x58, //  CMFT_FACE_POS_X
	0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x20, // , CMFT_EDGE_TOP
	0x7d, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // },..
	0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x5f, // { CMFT_FACE_NEG_
	0x5a, 0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x54, 0x4f, 0x50, // Z, CMFT_EDGE_TOP
	0x20, 0x7d, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  },..
	0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x53, //  { CMFT_FACE_POS
	0x5f, 0x5a, 0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x54, 0x4f, // _Z, CMFT_EDGE_TO
	0x50, 0x20, 0x7d, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x2c, // P },..        },
	0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x2f, 0x2f, 0x4e, 0x45, // ..        { //NE
	0x47, 0x5f, 0x59, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // G_Y..
	0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x47, //  { CMFT_FACE_NEG
	0x5f, 0x58, 0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x42, 0x4f, // _X, CMFT_EDGE_BO
	0x54, 0x54, 0x4f, 0x4d, 0x20, 0x7d, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // TTOM },..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, //      { CMFT_FACE
	0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x58, 0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, // _POS_X, CMFT_EDG
	0x45, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x20, 0x7d, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, // E_BOTTOM },..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, //          { CMFT_
	0x46, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x5a, 0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, // FACE_POS_Z, CMFT
	0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x20, 0x7d, 0x2c, 0x0d, // _EDGE_BOTTOM },.
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, // .            { C
	0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x5a, 0x2c, 0x20, // MFT_FACE_NEG_Z,
	0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, // CMFT_EDGE_BOTTOM
	0x20, 0x7d, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0d, //  },..        },.
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x2f, 0x2f, 0x50, 0x4f, 0x53, // .        { //POS
	0x5f, 0x5a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // _Z..
	0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x5f, // { CMFT_FACE_NEG_
	0x58, 0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x52, 0x49, 0x47, // X, CMFT_EDGE_RIG
	0x48, 0x54, 0x20, 0x20, 0x7d, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // HT  },..
	0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, //     { CMFT_FACE_
	0x50, 0x4f, 0x53, 0x5f, 0x58, 0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, // POS_X, CMFT_EDGE
	0x5f, 0x4c, 0x45, 0x46, 0x54, 0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, // _LEFT   },..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, //         { CMFT_F
	0x41, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x59, 0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, // ACE_POS_Y, CMFT_
	0x45, 0x44, 0x47, 0x45, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x20, 0x7d, 0x2c, 0x0d, 0x0a, // EDGE_BOTTOM },..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, //             { CM
	0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x59, 0x2c, 0x20, 0x43, // FT_FACE_NEG_Y, C
	0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x20, 0x20, 0x20, 0x20, // MFT_EDGE_TOP
	0x7d, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0d, 0x0a, // },..        },..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x2f, 0x2f, 0x4e, 0x45, 0x47, 0x5f, //         { //NEG_
	0x5a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, // Z..            {
	0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x58, //  CMFT_FACE_POS_X
	0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x52, 0x49, 0x47, 0x48, // , CMFT_EDGE_RIGH
	0x54, 0x20, 0x20, 0x7d, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // T  },..
	0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, //    { CMFT_FACE_N
	0x45, 0x47, 0x5f, 0x58, 0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, // EG_X, CMFT_EDGE_
	0x4c, 0x45, 0x46, 0x54, 0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // LEFT   },..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, //        { CMFT_FA
	0x43, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x59, 0x2c, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, // CE_POS_Y, CMFT_E
	0x44, 0x47, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0d, 0x0a, 0x20, // DGE_TOP    },..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x43, 0x4d, 0x46, //            { CMF
	0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x59, 0x2c, 0x20, 0x43, 0x4d, // T_FACE_NEG_Y, CM
	0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x20, 0x7d, // FT_EDGE_BOTTOM }
	0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0d, 0x0a, 0x20, 0x20, // ,..        }..
	0x20, 0x20, 0x7d, 0x3b, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x61, 0x74, //   };....    stat
	0x69, 0x63, 0x20, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x76, 0x65, 0x63, 0x54, 0x6f, 0x54, 0x65, 0x78, // ic void vecToTex
	0x65, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x2a, 0x20, 0x5f, // elCoord(float* _
	0x75, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x2a, 0x20, 0x5f, 0x76, 0x2c, 0x20, 0x75, 0x69, // u, float* _v, ui
	0x6e, 0x74, 0x38, 0x5f, 0x74, 0x2a, 0x20, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x2c, // nt8_t* _faceIdx,
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x0d, 0x0a, 0x20, //  float4 _vec)..
	0x20, 0x20, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, //    {..        fl
	0x6f, 0x61, 0x74, 0x34, 0x20, 0x61, 0x62, 0x73, 0x56, 0x65, 0x63, 0x20, 0x3d, 0x20, 0x66, 0x61, // oat4 absVec = fa
	0x62, 0x73, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // bs(_vec);..
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6d, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x66, //    float max = f
	0x6d, 0x61, 0x78, 0x28, 0x66, 0x6d, 0x61, 0x78, 0x28, 0x61, 0x62, 0x73, 0x56, 0x65, 0x63, 0x2e, // max(fmax(absVec.
	0x78, 0x2c, 0x20, 0x61, 0x62, 0x73, 0x56, 0x65, 0x63, 0x2e, 0x79, 0x29, 0x2c, 0x20, 0x61, 0x62, // x, absVec.y), ab
	0x73, 0x56, 0x65, 0x63, 0x2e, 0x7a, 0x29, 0x3b, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, // sVec.z);....
	0x20, 0x20, 0x20, 0x20, 0x2f, 0x2f, 0x20, 0x47, 0x65, 0x74, 0x20, 0x66, 0x61, 0x63, 0x65, 0x20, //     // Get face
	0x69, 0x64, 0x20, 0x28, 0x6d, 0x61, 0x78, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, // id (max componen
	0x74, 0x20, 0x3d, 0x3d, 0x20, 0x66, 0x61, 0x63, 0x65, 0x20, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, // t == face vector
	0x29, 0x2e, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, // )...        if (
	0x6d, 0x61, 0x78, 0x20, 0x3d, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x56, 0x65, 0x63, 0x2e, 0x78, 0x29, // max == absVec.x)
	0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, // ..        {..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x49, //          *_faceI
	0x64, 0x78, 0x20, 0x3d, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x3e, 0x3d, 0x20, // dx = (_vec.x >=
	0x30, 0x2e, 0x30, 0x66, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x5f, 0x74, // 0.0f) ? (uint8_t
	0x29, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x58, // )CMFT_FACE_POS_X
	0x20, 0x3a, 0x20, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x5f, 0x74, 0x29, 0x43, 0x4d, 0x46, 0x54, //  : (uint8_t)CMFT
	0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x58, 0x3b, 0x0d, 0x0a, 0x20, 0x20, // _FACE_NEG_X;..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       }..
	0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x69, 0x66, 0x20, 0x28, 0x6d, 0x61, 0x78, 0x20, 0x3d, 0x3d, //  else if (max ==
	0x20, 0x61, 0x62, 0x73, 0x56, 0x65, 0x63, 0x2e, 0x79, 0x29, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, //  absVec.y)..
	0x20, 0x20, 0x20, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //     {..
	0x20, 0x20, 0x20, 0x2a, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x20, 0x3d, 0x20, 0x28, //    *_faceIdx = (
	0x5f, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x29, 0x20, // _vec.y >= 0.0f)
	0x3f, 0x20, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x5f, 0x74, 0x29, 0x43, 0x4d, 0x46, 0x54, 0x5f, // ? (uint8_t)CMFT_
	0x46, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x59, 0x20, 0x3a, 0x20, 0x28, 0x75, 0x69, // FACE_POS_Y : (ui
	0x6e, 0x74, 0x38, 0x5f, 0x74, 0x29, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, // nt8_t)CMFT_FACE_
	0x4e, 0x45, 0x47, 0x5f, 0x59, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // NEG_Y;..
	0x7d, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, // }..        else
	0x2f, 0x2f, 0x69, 0x66, 0x20, 0x28, 0x6d, 0x61, 0x78, 0x20, 0x3d, 0x3d, 0x20, 0x61, 0x62, 0x73, // //if (max == abs
	0x56, 0x65, 0x63, 0x2e, 0x7a, 0x29, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // Vec.z)..
	0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, // {..            *
	0x5f, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x20, 0x3d, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, // _faceIdx = (_vec
	0x2e, 0x7a, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x75, // .z >= 0.0f) ? (u
	0x69, 0x6e, 0x74, 0x38, 0x5f, 0x74, 0x29, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, // int8_t)CMFT_FACE
	0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x5a, 0x20, 0x3a, 0x20, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x5f, // _POS_Z : (uint8_
	0x74, 0x29, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x5f, // t)CMFT_FACE_NEG_
	0x5a, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0d, 0x0a, 0x0d, // Z;..        }...
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2f, 0x2f, 0x20, 0x44, 0x69, 0x76, 0x69, // .        // Divi
	0x64, 0x65, 0x20, 0x62, 0x79, 0x20, 0x6d, 0x61, 0x78, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, // de by max compon
	0x65, 0x6e, 0x74, 0x2e, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // ent...        fl
	0x6f, 0x61, 0x74, 0x34, 0x20, 0x66, 0x61, 0x63, 0x65, 0x56, 0x65, 0x63, 0x20, 0x3d, 0x20, 0x5f, // oat4 faceVec = _
	0x76, 0x65, 0x63, 0x2f, 0x6d, 0x61, 0x78, 0x3b, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, // vec/max;....
	0x20, 0x20, 0x20, 0x20, 0x2a, 0x5f, 0x75, 0x20, 0x3d, 0x20, 0x28, 0x64, 0x6f, 0x74, 0x28, 0x73, //     *_u = (dot(s
	0x5f, 0x66, 0x61, 0x63, 0x65, 0x55, 0x76, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5b, 0x2a, // _faceUvVectors[*
	0x5f, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x5d, 0x5b, 0x30, 0x5d, 0x2c, 0x20, 0x66, 0x61, // _faceIdx][0], fa
	0x63, 0x65, 0x56, 0x65, 0x63, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x29, 0x20, 0x2a, // ceVec) + 1.0f) *
	0x20, 0x30, 0x2e, 0x35, 0x66, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  0.5f;..
	0x2a, 0x5f, 0x76, 0x20, 0x3d, 0x20, 0x28, 0x64, 0x6f, 0x74, 0x28, 0x73, 0x5f, 0x66, 0x61, 0x63, // *_v = (dot(s_fac
	0x65, 0x55, 0x76, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5b, 0x2a, 0x5f, 0x66, 0x61, 0x63, // eUvVectors[*_fac
	0x65, 0x49, 0x64, 0x78, 0x5d, 0x5b, 0x31, 0x5d, 0x2c, 0x20, 0x66, 0x61, 0x63, 0x65, 0x56, 0x65, // eIdx][1], faceVe
	0x63, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x29, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x35, // c) + 1.0f) * 0.5
	0x66, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, // f;..    }....
	0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x64, 0x65, 0x74, //  static void det
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, // ermineFilterArea
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x2a, 0x20, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, // (float4* _filter
	0x41, 0x72, 0x65, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x74, 0x61, // Area, float4 _ta
	0x70, 0x56, 0x65, 0x63, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x66, 0x69, 0x6c, // pVec, float _fil
	0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x29, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0d, // terSize)..    {.
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x75, // .        float u
	0x75, 0x2c, 0x20, 0x76, 0x76, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // u, vv;..
	0x75, 0x69, 0x6e, 0x74, 0x38, 0x5f, 0x74, 0x20, 0x68, 0x69, 0x74, 0x46, 0x61, 0x63, 0x65, 0x49, // uint8_t hitFaceI
	0x64, 0x78, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x76, 0x65, 0x63, // dx;..        vec
	0x54, 0x6f, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x28, 0x26, 0x75, 0x75, // ToTexelCoord(&uu
	0x2c, 0x20, 0x26, 0x76, 0x76, 0x2c, 0x20, 0x26, 0x68, 0x69, 0x74, 0x46, 0x61, 0x63, 0x65, 0x49, // , &vv, &hitFaceI
	0x64, 0x78, 0x2c, 0x20, 0x5f, 0x74, 0x61, 0x70, 0x56, 0x65, 0x63, 0x29, 0x3b, 0x0d, 0x0a, 0x0d, // dx, _tapVec);...
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, // .        float4
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x20, 0x3d, 0x20, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, // bounds = { 0.0f,
	0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  0.0f, 0.0f, 0.0
	0x66, 0x20, 0x7d, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x61, // f };..        aa
	0x62, 0x62, 0x41, 0x64, 0x64, 0x28, 0x26, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x2c, 0x20, 0x75, // bbAdd(&bounds, u
	0x75, 0x2d, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x2c, 0x20, 0x76, // u-_filterSize, v
	0x76, 0x2d, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x29, 0x3b, 0x0d, // v-_filterSize);.
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x61, 0x62, 0x62, 0x41, 0x64, 0x64, // .        aabbAdd
	0x28, 0x26, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x2c, 0x20, 0x75, 0x75, 0x2b, 0x5f, 0x66, 0x69, // (&bounds, uu+_fi
	0x6c, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x2c, 0x20, 0x76, 0x76, 0x2b, 0x5f, 0x66, 0x69, // lterSize, vv+_fi
	0x6c, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x29, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, // lterSize);..
	0x20, 0x20, 0x20, 0x20, 0x61, 0x61, 0x62, 0x62, 0x43, 0x6c, 0x61, 0x6d, 0x70, 0x28, 0x26, 0x62, //     aabbClamp(&b
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, // ounds, 0.0f, 1.0
	0x66, 0x29, 0x3b, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, // f);....        _
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x5b, 0x68, 0x69, 0x74, 0x46, 0x61, // filterArea[hitFa
	0x63, 0x65, 0x49, 0x64, 0x78, 0x5d, 0x20, 0x3d, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x3b, // ceIdx] = bounds;
	0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6e, 0x75, 0x6d, // ....        enum
	0x20, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x53, 0x69, 0x64, 0x65, 0x73, 0x0d, //  NeighbourSides.
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, // .        {..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4c, 0x65, 0x66, 0x74, 0x2c, 0x0d, 0x0a, 0x20, //         Left,..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x52, 0x69, 0x67, 0x68, 0x74, //            Right
	0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x54, // ,..            T
	0x6f, 0x70, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // op,..
	0x20, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x2c, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, //  Bottom,....
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x2c, 0x0d, 0x0a, //         Count,..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x3b, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, //         };....
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x62, 0x6c, 0x65, //       float3 ble
	0x65, 0x64, 0x5b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x5d, 0x20, 0x3d, 0x20, 0x2f, 0x2a, 0x61, 0x6d, // ed[Count] = /*am
	0x6f, 0x75, 0x6e, 0x74, 0x2c, 0x20, 0x62, 0x62, 0x6d, 0x69, 0x6e, 0x2c, 0x20, 0x62, 0x62, 0x6d, // ount, bbmin, bbm
	0x61, 0x78, 0x2a, 0x2f, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0d, // ax*/..        {.
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x2f, // .            { /
	0x2f, 0x20, 0x4c, 0x65, 0x66, 0x74, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // / Left..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, //         _filterS
	0x69, 0x7a, 0x65, 0x20, 0x2d, 0x20, 0x75, 0x75, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // ize - uu,..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, //            bound
	0x73, 0x2e, 0x79, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // s.y,..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x2e, 0x77, 0x2c, 0x0d, //       bounds.w,.
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0d, // .            },.
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x2f, // .            { /
	0x2f, 0x20, 0x52, 0x69, 0x67, 0x68, 0x74, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // / Right..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x75, 0x75, 0x20, 0x2b, 0x20, 0x5f, 0x66, //          uu + _f
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x66, // ilterSize - 1.0f
	0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ,..
	0x20, 0x20, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x2e, 0x79, 0x2c, 0x0d, 0x0a, 0x20, 0x20, //    bounds.y,..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, //               bo
	0x75, 0x6e, 0x64, 0x73, 0x2e, 0x77, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // unds.w,..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //      },..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x2f, 0x2f, 0x20, 0x54, 0x6f, 0x70, 0x0d, 0x0a, 0x20, //      { // Top..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, //                _
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x2d, 0x20, 0x76, 0x76, 0x2c, // filterSize - vv,
	0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ..
	0x20, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x2e, 0x78, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, //   bounds.x,..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, 0x75, //              bou
	0x6e, 0x64, 0x73, 0x2e, 0x7a, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // nds.z,..
	0x20, 0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //     },..
	0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x2f, 0x2f, 0x20, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x0d, //     { // Bottom.
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .
	0x20, 0x76, 0x76, 0x20, 0x2b, 0x20, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, //  vv + _filterSiz
	0x65, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // e - 1.0f,..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, //            bound
	0x73, 0x2e, 0x78, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // s.x,..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x2e, 0x7a, 0x2c, 0x0d, //       bounds.z,.
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0d, // .            },.
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x3b, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, // .        };....
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2f, 0x2f, 0x20, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, //        // Determ
	0x69, 0x6e, 0x65, 0x20, 0x62, 0x6c, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6f, 0x72, // ine bleeding for
	0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x73, 0x69, 0x64, 0x65, 0x2e, 0x0d, 0x0a, 0x20, 0x20, 0x20, //  each side...
	0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x5f, //      for (uint8_
	0x74, 0x20, 0x73, 0x69, 0x64, 0x65, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x73, 0x69, 0x64, 0x65, // t side = 0; side
	0x20, 0x3c, 0x20, 0x34, 0x3b, 0x20, 0x2b, 0x2b, 0x73, 0x69, 0x64, 0x65, 0x29, 0x0d, 0x0a, 0x20, //  < 4; ++side)..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        {..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x5f, 0x74, 0x20, 0x63, 0x75, //       uint8_t cu
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x20, 0x3d, 0x20, 0x68, // rrentFaceIdx = h
	0x69, 0x74, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x3b, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, // itFaceIdx;....
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x66, //           for (f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x6c, 0x65, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, // loat bleedAmount
	0x20, 0x3d, 0x20, 0x62, 0x6c, 0x65, 0x65, 0x64, 0x5b, 0x73, 0x69, 0x64, 0x65, 0x5d, 0x2e, 0x78, //  = bleed[side].x
	0x3b, 0x20, 0x62, 0x6c, 0x65, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x3e, 0x20, // ; bleedAmount >
	0x30, 0x2e, 0x30, 0x66, 0x3b, 0x20, 0x62, 0x6c, 0x65, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, // 0.0f; bleedAmoun
	0x74, 0x20, 0x2d, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x29, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, // t -= 1.0f)..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //         {..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x38, //            uint8
	0x5f, 0x74, 0x20, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x46, 0x61, 0x63, 0x65, // _t neighbourFace
	0x49, 0x64, 0x78, 0x20, 0x20, 0x3d, 0x20, 0x73, 0x5f, 0x63, 0x75, 0x62, 0x65, 0x46, 0x61, 0x63, // Idx  = s_cubeFac
	0x65, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x73, 0x5b, 0x63, 0x75, 0x72, 0x72, // eNeighbours[curr
	0x65, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x5d, 0x5b, 0x73, 0x69, 0x64, 0x65, // entFaceIdx][side
	0x5d, 0x2e, 0x6d, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x3b, 0x0d, 0x0a, 0x20, 0x20, // ].m_faceIdx;..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x75, 0x69, //               ui
	0x6e, 0x74, 0x38, 0x5f, 0x74, 0x20, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x46, // nt8_t neighbourF
	0x61, 0x63, 0x65, 0x45, 0x64, 0x67, 0x65, 0x20, 0x3d, 0x20, 0x73, 0x5f, 0x63, 0x75, 0x62, 0x65, // aceEdge = s_cube
	0x46, 0x61, 0x63, 0x65, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x73, 0x5b, 0x63, // FaceNeighbours[c
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x5d, 0x5b, 0x73, // urrentFaceIdx][s
	0x69, 0x64, 0x65, 0x5d, 0x2e, 0x6d, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x45, 0x64, 0x67, 0x65, 0x3b, // ide].m_faceEdge;
	0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ..
	0x20, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, //   currentFaceIdx
	0x20, 0x3d, 0x20, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x46, 0x61, 0x63, 0x65, //  = neighbourFace
	0x49, 0x64, 0x78, 0x3b, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // Idx;....
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x62, //         float bb
	0x4d, 0x69, 0x6e, 0x20, 0x3d, 0x20, 0x62, 0x6c, 0x65, 0x65, 0x64, 0x5b, 0x73, 0x69, 0x64, 0x65, // Min = bleed[side
	0x5d, 0x2e, 0x79, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ].y;..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x62, 0x4d, 0x61, //       float bbMa
	0x78, 0x20, 0x3d, 0x20, 0x62, 0x6c, 0x65, 0x65, 0x64, 0x5b, 0x73, 0x69, 0x64, 0x65, 0x5d, 0x2e, // x = bleed[side].
	0x7a, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // z;..
	0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x28, 0x73, 0x69, 0x64, 0x65, 0x20, 0x3d, 0x3d, //     if ((side ==
	0x20, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x46, 0x61, 0x63, 0x65, 0x45, 0x64, //  neighbourFaceEd
	0x67, 0x65, 0x29, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ge)..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x7c, 0x20, 0x28, 0x33, 0x20, 0x3d, 0x3d, 0x20, 0x28, 0x73, //      || (3 == (s
	0x69, 0x64, 0x65, 0x20, 0x2b, 0x20, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x46, // ide + neighbourF
	0x61, 0x63, 0x65, 0x45, 0x64, 0x67, 0x65, 0x29, 0x29, 0x29, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, // aceEdge)))..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0d, 0x0a, 0x20, //             {..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x2f, 0x2f, 0x20, 0x46, 0x6c, 0x69, 0x70, 0x2e, 0x0d, 0x0a, 0x20, 0x20, 0x20, //    // Flip...
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x62, 0x62, 0x4d, 0x69, 0x6e, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x20, 0x2d, 0x20, //  bbMin = 1.0f -
	0x62, 0x62, 0x4d, 0x69, 0x6e, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // bbMin;..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x62, 0x4d, 0x61, //             bbMa
	0x78, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x20, 0x2d, 0x20, 0x62, 0x62, 0x4d, 0x61, 0x78, // x = 1.0f - bbMax
	0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ;..
	0x20, 0x20, 0x20, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    }....
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x20, 0x28, //         switch (
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x46, 0x61, 0x63, 0x65, 0x45, 0x64, 0x67, // neighbourFaceEdg
	0x65, 0x29, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // e)..
	0x20, 0x20, 0x20, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //     {..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x61, 0x73, 0x65, 0x20, 0x43, 0x4d, 0x46, 0x54, //        case CMFT
	0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x3a, 0x0d, 0x0a, 0x20, 0x20, 0x20, // _EDGE_LEFT:..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  {..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x61, 0x62, 0x62, //             aabb
	0x41, 0x64, 0x64, 0x28, 0x26, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, // Add(&_filterArea
	0x5b, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, // [neighbourFaceId
	0x78, 0x5d, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x62, 0x62, 0x4d, 0x69, 0x6e, 0x29, // x], 0.0f, bbMin)
	0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ;..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x61, 0x62, 0x62, 0x41, //            aabbA
	0x64, 0x64, 0x28, 0x26, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x5b, // dd(&_filterArea[
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, // neighbourFaceIdx
	0x5d, 0x2c, 0x20, 0x62, 0x6c, 0x65, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2c, 0x20, // ], bleedAmount,
	0x62, 0x62, 0x4d, 0x61, 0x78, 0x29, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // bbMax);..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0d, 0x0a, //              }..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // break;....
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x61, 0x73, 0x65, 0x20, 0x43, //           case C
	0x4d, 0x46, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x3a, 0x0d, // MFT_EDGE_RIGHT:.
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //      {..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x61, 0x61, 0x62, 0x62, 0x41, 0x64, 0x64, 0x28, 0x26, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, // aabbAdd(&_filter
	0x41, 0x72, 0x65, 0x61, 0x5b, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x46, 0x61, // Area[neighbourFa
	0x63, 0x65, 0x49, 0x64, 0x78, 0x5d, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x20, 0x2d, 0x20, 0x62, // ceIdx], 1.0f - b
	0x6c, 0x65, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2c, 0x20, 0x62, 0x62, 0x4d, 0x69, // leedAmount, bbMi
	0x6e, 0x29, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // n);..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x61, 0x62, //              aab
	0x62, 0x41, 0x64, 0x64, 0x28, 0x26, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, // bAdd(&_filterAre
	0x61, 0x5b, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x46, 0x61, 0x63, 0x65, 0x49, // a[neighbourFaceI
	0x64, 0x78, 0x5d, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x62, 0x62, 0x4d, 0x61, 0x78, // dx], 1.0f, bbMax
	0x29, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // );..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //         }..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, //            break
	0x3b, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ;....
	0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x61, 0x73, 0x65, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x45, //      case CMFT_E
	0x44, 0x47, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x3a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // DGE_TOP:..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0d, //               {.
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x61, 0x62, 0x62, 0x41, 0x64, 0x64, //          aabbAdd
	0x28, 0x26, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x5b, 0x6e, 0x65, // (&_filterArea[ne
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x5d, 0x2c, // ighbourFaceIdx],
	0x20, 0x62, 0x62, 0x4d, 0x69, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x29, 0x3b, 0x0d, 0x0a, //  bbMin, 0.0f);..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x61, 0x62, 0x62, 0x41, 0x64, 0x64, 0x28, //         aabbAdd(
	0x26, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x5b, 0x6e, 0x65, 0x69, // &_filterArea[nei
	0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x5d, 0x2c, 0x20, // ghbourFaceIdx],
	0x62, 0x62, 0x4d, 0x61, 0x78, 0x2c, 0x20, 0x62, 0x6c, 0x65, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, // bbMax, bleedAmou
	0x6e, 0x74, 0x29, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // nt);..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0d, 0x0a, 0x20, 0x20, 0x20, //           }..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, //              bre
	0x61, 0x6b, 0x3b, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ak;....
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x61, 0x73, 0x65, 0x20, 0x43, 0x4d, 0x46, 0x54, //        case CMFT
	0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x3a, 0x0d, 0x0a, 0x20, // _EDGE_BOTTOM:..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    {..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x61, //               aa
	0x62, 0x62, 0x41, 0x64, 0x64, 0x28, 0x26, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, // bbAdd(&_filterAr
	0x65, 0x61, 0x5b, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x46, 0x61, 0x63, 0x65, // ea[neighbourFace
	0x49, 0x64, 0x78, 0x5d, 0x2c, 0x20, 0x62, 0x62, 0x4d, 0x69, 0x6e, 0x2c, 0x20, 0x31, 0x2e, 0x30, // Idx], bbMin, 1.0
	0x66, 0x20, 0x2d, 0x20, 0x62, 0x6c, 0x65, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x29, // f - bleedAmount)
	0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ;..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x61, 0x62, 0x62, 0x41, //            aabbA
	0x64, 0x64, 0x28, 0x26, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x5b, // dd(&_filterArea[
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, // neighbourFaceIdx
	0x5d, 0x2c, 0x20, 0x62, 0x62, 0x4d, 0x61, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x29, 0x3b, // ], bbMax, 1.0f);
	0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       }..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0d, //          break;.
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .
	0x20, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  }....
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2f, 0x2f, 0x20, 0x43, 0x6c, 0x61, 0x6d, 0x70, 0x20, 0x62, //       // Clamp b
	0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x62, 0x6f, 0x78, 0x20, 0x74, 0x6f, 0x20, 0x66, // ounding box to f
	0x61, 0x63, 0x65, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x2e, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // ace size...
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x61, 0x62, 0x62, 0x43, //            aabbC
	0x6c, 0x61, 0x6d, 0x70, 0x28, 0x26, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, // lamp(&_filterAre
	0x61, 0x5b, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x46, 0x61, 0x63, 0x65, 0x49, // a[neighbourFaceI
	0x64, 0x78, 0x5d, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x29, // dx], 0.0f, 1.0f)
	0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, // ;..            }
	0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0d, 0x0a, 0x20, 0x20, 0x20, // ..        }..
	0x20, 0x7d, 0x0d, 0x0a, 0x23, 0x65, 0x6e, 0x64, 0x69, 0x66, 0x20, 0x2f, 0x2f, 0x43, 0x4d, 0x46, //  }..#endif //CMF
	0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, // T_COMPUTE_FILTER
	0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x50, 0x55, 0x0d, 0x0a, 0x0d, 0x0a, // _AREA_ON_CPU....
	0x5f, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x20, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x72, 0x61, // __kernel void ra
	0x64, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x67, // dianceFilterSing
	0x6c, 0x65, 0x46, 0x61, 0x63, 0x65, 0x28, 0x5f, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6f, // leFace(__write_o
	0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, 0x6f, // nly image2d_t _o
	0x75, 0x74, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ut..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, //          , __rea
	0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, // d_only  image2d_
	0x74, 0x20, 0x5f, 0x73, 0x72, 0x63, 0x44, 0x61, 0x74, 0x61, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, // t _srcData..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x20, //  , __read_only
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // image2d_t _norma
	0x6c, 0x53, 0x6f, 0x6c, 0x69, 0x64, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x0d, 0x0a, 0x20, 0x20, 0x20, // lSolidAngle..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x38, 0x5f, 0x74, 0x20, 0x5f, 0x64, 0x73, 0x74, 0x46, //   , int8_t _dstF
	0x61, 0x63, 0x65, 0x49, 0x64, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // aceId..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x69, 0x6e, //             , in
	0x74, 0x33, 0x32, 0x5f, 0x74, 0x20, 0x5f, 0x64, 0x73, 0x74, 0x46, 0x61, 0x63, 0x65, 0x53, 0x69, // t32_t _dstFaceSi
	0x7a, 0x65, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ze..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //          , float
	0x20, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x0d, //  _specularPower.
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x73, //       , float _s
	0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x0d, 0x0a, 0x20, 0x20, // pecularAngle..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x66, 0x69, 0x6c, 0x74, //    , float _filt
	0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // erSize..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x66, //              , f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x77, 0x61, 0x72, 0x70, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, // loat _warp..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x38, 0x5f, 0x74, 0x20, 0x5f, 0x73, 0x72, 0x63, 0x46, 0x61, //  , int8_t _srcFa
	0x63, 0x65, 0x49, 0x64, 0x78, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ceIdx..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x66, 0x6c, //             , fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x73, 0x72, 0x63, 0x46, 0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, // oat _srcFaceSize
	0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x23, 0x69, 0x66, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, //        #if CMFT_
	0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, // COMPUTE_FILTER_A
	0x52, 0x45, 0x41, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x50, 0x55, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, // REA_ON_CPU..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, //  , __read_only i
	0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x0d, 0x0a, // mage2d_t _area..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x23, 0x65, 0x6e, 0x64, 0x69, 0x66, 0x20, 0x2f, 0x2f, 0x21, 0x43, //      #endif //!C
	0x4d, 0x46, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x54, // MFT_COMPUTE_FILT
	0x45, 0x52, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x50, 0x55, 0x0d, 0x0a, // ER_AREA_ON_CPU..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x0d, 0x0a, 0x7b, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, //      )..{....
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x78, 0x78, 0x20, 0x3d, 0x20, //  const int xx =
	0x67, 0x65, 0x74, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x28, 0x31, 0x29, // get_global_id(1)
	0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, // ;..    const int
	0x20, 0x79, 0x79, 0x20, 0x3d, 0x20, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, //  yy = get_global
	0x5f, 0x69, 0x64, 0x28, 0x30, 0x29, 0x3b, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // _id(0);....    f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, // loat4 colorWeigh
	0x74, 0x20, 0x3d, 0x20, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, // t = { 0.0f, 0.0f
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x3b, 0x0d, // , 0.0f, 0.0f };.
	0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // ...    const flo
	0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x44, 0x73, 0x74, 0x46, 0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, // at invDstFaceSiz
	0x65, 0x5f, 0x4d, 0x75, 0x6c, 0x32, 0x20, 0x3d, 0x20, 0x32, 0x2e, 0x30, 0x66, 0x2f, 0x5f, 0x64, // e_Mul2 = 2.0f/_d
	0x73, 0x74, 0x46, 0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, // stFaceSize;..
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x76, 0x20, //  const float vv
	0x3d, 0x20, 0x28, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x29, 0x79, 0x79, 0x20, 0x2b, 0x20, 0x30, // = ((float)yy + 0
	0x2e, 0x35, 0x66, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x44, 0x73, 0x74, 0x46, 0x61, 0x63, 0x65, 0x53, // .5f)*invDstFaceS
	0x69, 0x7a, 0x65, 0x5f, 0x4d, 0x75, 0x6c, 0x32, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x3b, // ize_Mul2 - 1.0f;
	0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // ..    const floa
	0x74, 0x20, 0x75, 0x75, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x29, 0x78, // t uu = ((float)x
	0x78, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x35, 0x66, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x44, 0x73, 0x74, // x + 0.5f)*invDst
	0x46, 0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x4d, 0x75, 0x6c, 0x32, 0x20, 0x2d, 0x20, // FaceSize_Mul2 -
	0x31, 0x2e, 0x30, 0x66, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 1.0f;..    const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x74, 0x61, 0x70, 0x56, 0x65, 0x63, 0x20, 0x3d, //  float4 tapVec =
	0x20, 0x74, 0x65, 0x78, 0x65, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x56, 0x65, 0x63, //  texelCoordToVec
	0x57, 0x61, 0x72, 0x70, 0x28, 0x75, 0x75, 0x2c, 0x20, 0x76, 0x76, 0x2c, 0x20, 0x5f, 0x73, 0x72, // Warp(uu, vv, _sr
	0x63, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x2c, 0x20, 0x5f, 0x77, 0x61, 0x72, 0x70, 0x29, // cFaceIdx, _warp)
	0x3b, 0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x69, 0x66, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x43, 0x4f, // ;....#if CMFT_CO
	0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x52, 0x45, // MPUTE_FILTER_ARE
	0x41, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x50, 0x55, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, // A_ON_CPU..    co
	0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6f, // nst int2 areaCoo
	0x72, 0x64, 0x20, 0x3d, 0x20, 0x7b, 0x20, 0x78, 0x78, 0x2a, 0x36, 0x20, 0x2b, 0x20, 0x5f, 0x64, // rd = { xx*6 + _d
	0x73, 0x74, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x2c, 0x20, 0x79, 0x79, 0x20, 0x7d, 0x3b, 0x0d, // stFaceId, yy };.
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // .    const float
	0x34, 0x20, 0x61, 0x72, 0x65, 0x61, 0x20, 0x3d, 0x20, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, // 4 area = read_im
	0x61, 0x67, 0x65, 0x66, 0x28, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x61, // agef(_area, s_sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6f, 0x72, 0x64, // mpler, areaCoord
	0x29, 0x3b, 0x0d, 0x0a, 0x23, 0x65, 0x6c, 0x73, 0x65, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // );..#else..    f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, // loat4 filterArea
	0x5b, 0x36, 0x5d, 0x20, 0x3d, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, // [6] =..    {..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, //       { 0.0f, 0.
	0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, // 0f, 0.0f, 0.0f }
	0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x30, 0x2e, 0x30, // ,..        { 0.0
	0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, // f, 0.0f, 0.0f, 0
	0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .0f },..
	0x7b, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, // { 0.0f, 0.0f, 0.
	0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, // 0f, 0.0f },..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, //      { 0.0f, 0.0
	0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, // f, 0.0f, 0.0f },
	0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x66, // ..        { 0.0f
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, // , 0.0f, 0.0f, 0.
	0x30, 0x66, 0x20, 0x7d, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, // 0f },..        {
	0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  0.0f, 0.0f, 0.0
	0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, // f, 0.0f },..
	0x7d, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, // };..    determin
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x28, 0x66, 0x69, 0x6c, 0x74, // eFilterArea(filt
	0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x2c, 0x20, 0x74, 0x61, 0x70, 0x56, 0x65, 0x63, 0x2c, 0x20, // erArea, tapVec,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x29, 0x3b, 0x0d, 0x0a, 0x20, // _filterSize);..
	0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, //    const float4
	0x61, 0x72, 0x65, 0x61, 0x20, 0x3d, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, // area = filterAre
	0x61, 0x5b, 0x5f, 0x64, 0x73, 0x74, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x5d, 0x3b, 0x0d, 0x0a, // a[_dstFaceId];..
	0x23, 0x65, 0x6e, 0x64, 0x69, 0x66, 0x20, 0x2f, 0x2f, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x43, 0x4f, // #endif //CMFT_CO
	0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x52, 0x45, // MPUTE_FILTER_ARE
	0x41, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x50, 0x55, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, // A_ON_CPU....
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x34, 0x20, 0x6d, 0x69, 0x6e, 0x6d, 0x61, // const int4 minma
	0x78, 0x20, 0x3d, 0x20, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x34, // x = convert_int4
	0x28, 0x61, 0x72, 0x65, 0x61, 0x2a, 0x5f, 0x73, 0x72, 0x63, 0x46, 0x61, 0x63, 0x65, 0x53, 0x69, // (area*_srcFaceSi
	0x7a, 0x65, 0x29, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // ze);..    const
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x20, 0x6d, 0x69, 0x6e, 0x58, 0x20, 0x3d, 0x20, 0x6d, // int32_t minX = m
	0x69, 0x6e, 0x6d, 0x61, 0x78, 0x2e, 0x78, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, // inmax.x;..    co
	0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x20, 0x6d, 0x69, 0x6e, 0x59, // nst int32_t minY
	0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x6d, 0x61, 0x78, 0x2e, 0x79, 0x3b, 0x0d, 0x0a, 0x20, 0x20, //  = minmax.y;..
	0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x20, //   const int32_t
	0x6d, 0x61, 0x78, 0x58, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x6d, 0x61, 0x78, 0x2e, 0x7a, 0x3b, // maxX = minmax.z;
	0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x33, // ..    const int3
	0x32, 0x5f, 0x74, 0x20, 0x6d, 0x61, 0x78, 0x59, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x6d, 0x61, // 2_t maxY = minma
	0x78, 0x2e, 0x77, 0x3b, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6f, 0x72, 0x20, // x.w;....    for
	0x28, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x20, 0x79, 0x79, 0x20, 0x3d, 0x20, 0x6d, 0x69, // (int32_t yy = mi
	0x6e, 0x59, 0x3b, 0x20, 0x79, 0x79, 0x20, 0x3c, 0x20, 0x6d, 0x61, 0x78, 0x59, 0x3b, 0x20, 0x2b, // nY; yy < maxY; +
	0x2b, 0x79, 0x79, 0x29, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, // +yy)..    {..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, //      for (int32_
	0x74, 0x20, 0x78, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x58, 0x3b, 0x20, 0x78, 0x78, 0x20, // t xx = minX; xx
	0x3c, 0x20, 0x6d, 0x61, 0x78, 0x58, 0x3b, 0x20, 0x2b, 0x2b, 0x78, 0x78, 0x29, 0x0d, 0x0a, 0x20, // < maxX; ++xx)..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        {..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x32, //       const int2
	0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x7b, 0x20, 0x78, 0x78, 0x2c, 0x20, 0x79, //  coord = { xx, y
	0x79, 0x20, 0x7d, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // y };..
	0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x6e, //   const float4 n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x20, 0x3d, 0x20, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x61, // ormal = read_ima
	0x67, 0x65, 0x66, 0x28, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x6f, 0x6c, 0x69, 0x64, // gef(_normalSolid
	0x41, 0x6e, 0x67, 0x6c, 0x65, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // Angle, s_sampler
	0x2c, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // , coord);..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, //        const flo
	0x61, 0x74, 0x20, 0x64, 0x70, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6e, 0x6f, 0x72, 0x6d, // at dp = dot(norm
	0x61, 0x6c, 0x2c, 0x20, 0x74, 0x61, 0x70, 0x56, 0x65, 0x63, 0x29, 0x3b, 0x0d, 0x0a, 0x20, 0x20, // al, tapVec);..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x64, 0x70, //           if (dp
	0x20, 0x3e, 0x3d, 0x20, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x41, 0x6e, 0x67, //  >= _specularAng
	0x6c, 0x65, 0x29, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // le)..
	0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  {..
	0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x20, //     colorWeight
	0x2b, 0x3d, 0x20, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x66, 0x28, 0x5f, // += read_imagef(_
	0x73, 0x72, 0x63, 0x44, 0x61, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // srcData, s_sampl
	0x65, 0x72, 0x2c, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, // er, coord)..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, //          * norma
	0x6c, 0x2e, 0x77, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // l.w..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x2a, 0x20, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x72, 0x28, //   * native_powr(
	0x64, 0x70, 0x2c, 0x20, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x50, 0x6f, 0x77, // dp, _specularPow
	0x65, 0x72, 0x29, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // er);..
	0x20, 0x20, 0x7d, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0d, 0x0a, //   }..        }..
	0x20, 0x20, 0x20, 0x20, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, //     }....    con
	0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x64, 0x73, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x20, // st int2 dst = {
	0x78, 0x78, 0x2c, 0x20, 0x79, 0x79, 0x20, 0x7d, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x77, // xx, yy };..    w
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x66, 0x28, 0x5f, 0x6f, 0x75, 0x74, // rite_imagef(_out
	0x2c, 0x20, 0x64, 0x73, 0x74, 0x2c, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x57, 0x65, 0x69, 0x67, // , dst, colorWeig
	0x68, 0x74, 0x29, 0x3b, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x5f, 0x5f, 0x6b, 0x65, 0x72, // ht);..}....__ker
	0x6e, 0x65, 0x6c, 0x20, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x73, 0x75, 0x6d, 0x28, 0x5f, 0x5f, 0x77, // nel void sum(__w
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, // rite_only image2
	0x64, 0x5f, 0x74, 0x20, 0x5f, 0x6f, 0x75, 0x74, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // d_t _out..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, //           , __re
	0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, // ad_only image2d_
	0x74, 0x20, 0x5f, 0x73, 0x72, 0x63, 0x30, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // t _src0..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, //          , __rea
	0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, // d_only image2d_t
	0x20, 0x5f, 0x73, 0x72, 0x63, 0x31, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  _src1..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, 0x64, //         , __read
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, // _only image2d_t
	0x5f, 0x73, 0x72, 0x63, 0x32, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // _src2..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, //        , __read_
	0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, // only image2d_t _
	0x73, 0x72, 0x63, 0x33, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // src3..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, //       , __read_o
	0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, 0x73, // nly image2d_t _s
	0x72, 0x63, 0x34, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // rc4..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, //      , __read_on
	0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, 0x73, 0x72, // ly image2d_t _sr
	0x63, 0x35, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // c5..
	0x20, 0x20, 0x20, 0x20, 0x29, 0x0d, 0x0a, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, //     )..{..    co
	0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x78, 0x78, 0x20, 0x3d, 0x20, 0x67, 0x65, 0x74, // nst int xx = get
	0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x28, 0x31, 0x29, 0x3b, 0x0d, 0x0a, // _global_id(1);..
	0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x79, 0x79, //     const int yy
	0x20, 0x3d, 0x20, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69, 0x64, //  = get_global_id
	0x28, 0x30, 0x29, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // (0);..    const
	0x69, 0x6e, 0x74, 0x32, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x7b, 0x20, 0x78, // int2 coord = { x
	0x78, 0x2c, 0x20, 0x79, 0x79, 0x20, 0x7d, 0x3b, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, // x, yy };....
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x72, // float4 color = r
	0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x66, 0x28, 0x5f, 0x73, 0x72, 0x63, 0x30, // ead_imagef(_src0
	0x2c, 0x20, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x63, 0x6f, 0x6f, // , s_sampler, coo
	0x72, 0x64, 0x29, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // rd)..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x61, //       + read_ima
	0x67, 0x65, 0x66, 0x28, 0x5f, 0x73, 0x72, 0x63, 0x31, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x61, 0x6d, // gef(_src1, s_sam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0d, 0x0a, 0x20, 0x20, // pler, coord)..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2b, //                +
	0x20, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x66, 0x28, 0x5f, 0x73, 0x72, //  read_imagef(_sr
	0x63, 0x32, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x63, // c2, s_sampler, c
	0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // oord)..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, //         + read_i
	0x6d, 0x61, 0x67, 0x65, 0x66, 0x28, 0x5f, 0x73, 0x72, 0x63, 0x33, 0x2c, 0x20, 0x73, 0x5f, 0x73, // magef(_src3, s_s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0d, 0x0a, // ampler, coord)..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x2b, 0x20, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x66, 0x28, 0x5f, //  + read_imagef(_
	0x73, 0x72, 0x63, 0x34, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // src4, s_sampler,
	0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  coord)..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x61, 0x64, //           + read
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x66, 0x28, 0x5f, 0x73, 0x72, 0x63, 0x35, 0x2c, 0x20, 0x73, // _imagef(_src5, s
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, // _sampler, coord)
	0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ..
	0x20, 0x20, 0x20, 0x3b, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, //    ;....    if (
	0x30, 0x2e, 0x30, 0x20, 0x21, 0x3d, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x77, 0x29, 0x0d, // 0.0 != color.w).
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .    {..
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2f, 0x3d, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x77, // color /= color.w
	0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, // ;..    }....
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x66, 0x28, 0x5f, 0x6f, 0x75, // write_imagef(_ou
	0x74, 0x2c, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // t, coord, color)
	0x3b, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x5f, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, // ;..}....__kernel
	0x20, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x69, //  void radianceFi
	0x6c, 0x74, 0x65, 0x72, 0x28, 0x5f, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, // lter(__write_onl
	0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, 0x6f, 0x75, 0x74, // y image2d_t _out
	0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x69, //              , i
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x20, 0x5f, 0x64, 0x73, 0x74, 0x46, 0x61, 0x63, 0x65, 0x53, // nt32_t _dstFaceS
	0x69, 0x7a, 0x65, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ize..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, // , float _specula
	0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // rPower..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x73, 0x70, 0x65, 0x63, //    , float _spec
	0x75, 0x6c, 0x61, 0x72, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // ularAngle..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x66, //       , float _f
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // ilterSize..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x77, //       , float _w
	0x61, 0x72, 0x70, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // arp..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x2c, 0x20, 0x69, 0x6e, 0x74, 0x38, 0x5f, 0x74, 0x20, 0x5f, 0x73, 0x72, 0x63, 0x46, 0x61, 0x63, // , int8_t _srcFac
	0x65, 0x49, 0x64, 0x78, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // eIdx..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x73, 0x72, 0x63, 0x46, 0x61, 0x63, //  , float _srcFac
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // eSize..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, //   , __read_only
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, 0x73, 0x72, 0x63, 0x44, 0x61, // image2d_t _srcDa
	0x74, 0x61, 0x30, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ta0..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, // , __read_only im
	0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, 0x73, 0x72, 0x63, 0x44, 0x61, 0x74, 0x61, // age2d_t _srcData
	0x31, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 1..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, //               ,
	0x5f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, // __read_only imag
	0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, 0x73, 0x72, 0x63, 0x44, 0x61, 0x74, 0x61, 0x32, 0x0d, // e2d_t _srcData2.
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, //             , __
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, // read_only image2
	0x64, 0x5f, 0x74, 0x20, 0x5f, 0x73, 0x72, 0x63, 0x44, 0x61, 0x74, 0x61, 0x33, 0x0d, 0x0a, 0x20, // d_t _srcData3..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, //           , __re
	0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, // ad_only image2d_
	0x74, 0x20, 0x5f, 0x73, 0x72, 0x63, 0x44, 0x61, 0x74, 0x61, 0x34, 0x0d, 0x0a, 0x20, 0x20, 0x20, // t _srcData4..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, 0x64, //         , __read
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, // _only image2d_t
	0x5f, 0x73, 0x72, 0x63, 0x44, 0x61, 0x74, 0x61, 0x35, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // _srcData5..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, //       , __read_o
	0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, 0x6e, // nly image2d_t _n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x6f, 0x6c, 0x69, 0x64, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x30, // ormalSolidAngle0
	0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, //              , _
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, // _read_only image
	0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x6f, 0x6c, 0x69, // 2d_t _normalSoli
	0x64, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x31, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // dAngle1..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, //     , __read_onl
	0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, 0x6e, 0x6f, 0x72, // y image2d_t _nor
	0x6d, 0x61, 0x6c, 0x53, 0x6f, 0x6c, 0x69, 0x64, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x32, 0x0d, 0x0a, // malSolidAngle2..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, //            , __r
	0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, // ead_only image2d
	0x5f, 0x74, 0x20, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x6f, 0x6c, 0x69, 0x64, 0x41, // _t _normalSolidA
	0x6e, 0x67, 0x6c, 0x65, 0x33, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ngle3..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, //   , __read_only
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // image2d_t _norma
	0x6c, 0x53, 0x6f, 0x6c, 0x69, 0x64, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x34, 0x0d, 0x0a, 0x20, 0x20, // lSolidAngle4..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, //          , __rea
	0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, // d_only image2d_t
	0x20, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x6f, 0x6c, 0x69, 0x64, 0x41, 0x6e, 0x67, //  _normalSolidAng
	0x6c, 0x65, 0x35, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // le5..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x23, 0x69, 0x66, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, // #if CMFT_COMPUTE
	0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4f, 0x4e, 0x5f, // _FILTER_AREA_ON_
	0x43, 0x50, 0x55, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // CPU..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x2c, 0x20, 0x5f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6d, // , __read_only im
	0x61, 0x67, 0x65, 0x32, 0x64, 0x5f, 0x74, 0x20, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x0d, 0x0a, 0x20, // age2d_t _area..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x23, 0x65, 0x6e, 0x64, 0x69, 0x66, //           #endif
	0x20, 0x2f, 0x2f, 0x21, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, //  //!CMFT_COMPUTE
	0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4f, 0x4e, 0x5f, // _FILTER_AREA_ON_
	0x43, 0x50, 0x55, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // CPU..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x29, 0x0d, 0x0a, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // )..{..    const
	0x69, 0x6e, 0x74, 0x20, 0x78, 0x78, 0x20, 0x3d, 0x20, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x6c, 0x6f, // int xx = get_glo
	0x62, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x28, 0x31, 0x29, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, // bal_id(1);..
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x79, 0x79, 0x20, 0x3d, 0x20, 0x67, // const int yy = g
	0x65, 0x74, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x28, 0x30, 0x29, 0x3b, // et_global_id(0);
	0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x63, // ....    float4 c
	0x6f, 0x6c, 0x6f, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x20, 0x30, // olorWeight = { 0
	0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, // .0f, 0.0f, 0.0f,
	0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x3b, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, //  0.0f };....
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x44, // const float invD
	0x73, 0x74, 0x46, 0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x4d, 0x75, 0x6c, 0x32, 0x20, // stFaceSize_Mul2
	0x3d, 0x20, 0x32, 0x2e, 0x30, 0x66, 0x2f, 0x5f, 0x64, 0x73, 0x74, 0x46, 0x61, 0x63, 0x65, 0x53, // = 2.0f/_dstFaceS
	0x69, 0x7a, 0x65, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // ize;..    const
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x76, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x66, 0x6c, 0x6f, // float vv = ((flo
	0x61, 0x74, 0x29, 0x79, 0x79, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x35, 0x66, 0x29, 0x2a, 0x69, 0x6e, // at)yy + 0.5f)*in
	0x76, 0x44, 0x73, 0x74, 0x46, 0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x4d, 0x75, 0x6c, // vDstFaceSize_Mul
	0x32, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, // 2 - 1.0f;..    c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x75, 0x75, 0x20, 0x3d, 0x20, // onst float uu =
	0x28, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x29, 0x78, 0x78, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x35, // ((float)xx + 0.5
	0x66, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x44, 0x73, 0x74, 0x46, 0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, // f)*invDstFaceSiz
	0x65, 0x5f, 0x4d, 0x75, 0x6c, 0x32, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x3b, 0x0d, 0x0a, // e_Mul2 - 1.0f;..
	0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, //     const float4
	0x20, 0x74, 0x61, 0x70, 0x56, 0x65, 0x63, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x65, 0x6c, 0x43, //  tapVec = texelC
	0x6f, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x56, 0x65, 0x63, 0x57, 0x61, 0x72, 0x70, 0x28, 0x75, 0x75, // oordToVecWarp(uu
	0x2c, 0x20, 0x76, 0x76, 0x2c, 0x20, 0x5f, 0x73, 0x72, 0x63, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, // , vv, _srcFaceId
	0x78, 0x2c, 0x20, 0x5f, 0x77, 0x61, 0x72, 0x70, 0x29, 0x3b, 0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x69, // x, _warp);....#i
	0x66, 0x20, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x46, // f CMFT_COMPUTE_F
	0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x50, // ILTER_AREA_ON_CP
	0x55, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x46, // U..    #define F
	0x4c, 0x4f, 0x41, 0x54, 0x34, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x28, 0x5f, 0x66, 0x61, 0x63, 0x65, // LOAT4_AREA(_face
	0x29, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x61, 0x72, 0x65, // ) const int2 are
	0x61, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x7b, 0x20, 0x78, 0x78, 0x2a, 0x36, 0x20, // aCoord = { xx*6
	0x2b, 0x20, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x2c, 0x20, 0x79, 0x79, 0x20, 0x7d, 0x3b, 0x20, 0x63, // + _face, yy }; c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x61, 0x72, 0x65, 0x61, // onst float4 area
	0x20, 0x3d, 0x20, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x66, 0x28, 0x5f, //  = read_imagef(_
	0x61, 0x72, 0x65, 0x61, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // area, s_sampler,
	0x20, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x3b, 0x0d, 0x0a, 0x23, 0x65, //  areaCoord);..#e
	0x6c, 0x73, 0x65, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, // lse..    float4
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x5b, 0x36, 0x5d, 0x20, 0x3d, 0x0d, // filterArea[6] =.
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .    {..
	0x7b, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, // { 0.0f, 0.0f, 0.
	0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, // 0f, 0.0f },..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, //      { 0.0f, 0.0
	0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, // f, 0.0f, 0.0f },
	0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x66, // ..        { 0.0f
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, // , 0.0f, 0.0f, 0.
	0x30, 0x66, 0x20, 0x7d, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, // 0f },..        {
	0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  0.0f, 0.0f, 0.0
	0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, // f, 0.0f },..
	0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, //     { 0.0f, 0.0f
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x20, 0x7d, 0x2c, 0x0d, // , 0.0f, 0.0f },.
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, // .        { 0.0f,
	0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  0.0f, 0.0f, 0.0
	0x66, 0x20, 0x7d, 0x2c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x3b, 0x0d, 0x0a, 0x20, 0x20, // f },..    };..
	0x20, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, //   determineFilte
	0x72, 0x41, 0x72, 0x65, 0x61, 0x28, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, // rArea(filterArea
	0x2c, 0x20, 0x74, 0x61, 0x70, 0x56, 0x65, 0x63, 0x2c, 0x20, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, // , tapVec, _filte
	0x72, 0x53, 0x69, 0x7a, 0x65, 0x29, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x23, 0x64, 0x65, // rSize);..    #de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x34, 0x5f, 0x41, 0x52, 0x45, 0x41, // fine FLOAT4_AREA
	0x28, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x29, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // (_face) const fl
	0x6f, 0x61, 0x74, 0x34, 0x20, 0x61, 0x72, 0x65, 0x61, 0x20, 0x3d, 0x20, 0x66, 0x69, 0x6c, 0x74, // oat4 area = filt
	0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x5b, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x5d, 0x3b, 0x0d, 0x0a, // erArea[_face];..
	0x23, 0x65, 0x6e, 0x64, 0x69, 0x66, 0x20, 0x2f, 0x2f, 0x43, 0x4d, 0x46, 0x54, 0x5f, 0x43, 0x4f, // #endif //CMFT_CO
	0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x52, 0x45, // MPUTE_FILTER_ARE
	0x41, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x50, 0x55, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, // A_ON_CPU....
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, // #define PROCESS_
	0x46, 0x41, 0x43, 0x45, 0x28, 0x5f, 0x69, 0x69, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // FACE(_ii)
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x0d, 0x0a, 0x20, 0x20, //            ...
	0x20, 0x20, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   {
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x0d, 0x0a, //              ...
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x34, 0x5f, 0x41, //         FLOAT4_A
	0x52, 0x45, 0x41, 0x28, 0x5f, 0x69, 0x69, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // REA(_ii)
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, //                .
	0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x5c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, //  ...        cons
	0x74, 0x20, 0x69, 0x6e, 0x74, 0x34, 0x20, 0x6d, 0x69, 0x6e, 0x6d, 0x61, 0x78, 0x20, 0x3d, 0x20, // t int4 minmax =
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x34, 0x28, 0x61, 0x72, 0x65, // convert_int4(are
	0x61, 0x2a, 0x5f, 0x73, 0x72, 0x63, 0x46, 0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x29, 0x3b, // a*_srcFaceSize);
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x5c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, //    ...        co
	0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x20, 0x6d, 0x69, 0x6e, 0x58, // nst int32_t minX
	0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x6d, 0x61, 0x78, 0x2e, 0x78, 0x3b, 0x20, 0x20, 0x20, 0x20, //  = minmax.x;
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //      ...
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x20, 0x6d, 0x69, // const int32_t mi
	0x6e, 0x59, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x6d, 0x61, 0x78, 0x2e, 0x79, 0x3b, 0x20, 0x20, // nY = minmax.y;
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        ...
	0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x20, //   const int32_t
	0x6d, 0x61, 0x78, 0x58, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x6d, 0x61, 0x78, 0x2e, 0x7a, 0x3b, // maxX = minmax.z;
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, //          ...
	0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, //     const int32_
	0x74, 0x20, 0x6d, 0x61, 0x78, 0x59, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x6d, 0x61, 0x78, 0x2e, // t maxY = minmax.
	0x77, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // w;
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x0d, 0x0a, 0x20, 0x20, //            ...
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x0d, 0x0a, //              ...
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, //         for (int
	0x33, 0x32, 0x5f, 0x74, 0x20, 0x79, 0x79, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x59, 0x3b, 0x20, // 32_t yy = minY;
	0x79, 0x79, 0x20, 0x3c, 0x20, 0x6d, 0x61, 0x78, 0x59, 0x3b, 0x20, 0x2b, 0x2b, 0x79, 0x79, 0x29, // yy < maxY; ++yy)
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, //                .
	0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, // ..        {
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x5c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  ...
	0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x20, 0x78, 0x78, 0x20, // for (int32_t xx
	0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x58, 0x3b, 0x20, 0x78, 0x78, 0x20, 0x3c, 0x20, 0x6d, 0x61, 0x78, // = minX; xx < max
	0x58, 0x3b, 0x20, 0x2b, 0x2b, 0x78, 0x78, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // X; ++xx)
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x5c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    ...
	0x20, 0x20, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   {
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //      ...
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, //         const in
	0x74, 0x32, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x7b, 0x20, 0x78, 0x78, 0x2c, // t2 coord = { xx,
	0x20, 0x79, 0x79, 0x20, 0x7d, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  yy };
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        ...
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, //           const
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x20, 0x3d, 0x20, // float4 normal =
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x66, 0x28, 0x5f, 0x6e, 0x6f, 0x72, // read_imagef(_nor
	0x6d, 0x61, 0x6c, 0x53, 0x6f, 0x6c, 0x69, 0x64, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x23, 0x23, // malSolidAngle ##
	0x20, 0x5f, 0x69, 0x69, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, //  _ii, s_sampler,
	0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x3b, 0x20, 0x5c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, //  coord); ...
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, //             cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x64, 0x70, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, // t float dp = dot
	0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2c, 0x20, 0x74, 0x61, 0x70, 0x56, 0x65, 0x63, 0x29, // (normal, tapVec)
	0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ;
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x0d, 0x0a, 0x20, 0x20, //            ...
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, //               if
	0x20, 0x28, 0x64, 0x70, 0x20, 0x3e, 0x3d, 0x20, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, //  (dp >= _specula
	0x72, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // rAngle)
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x0d, 0x0a, //              ...
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // {
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, //                .
	0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ..
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, //       colorWeigh
	0x74, 0x20, 0x2b, 0x3d, 0x20, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x66, // t += read_imagef
	0x28, 0x5f, 0x73, 0x72, 0x63, 0x44, 0x61, 0x74, 0x61, 0x20, 0x23, 0x23, 0x20, 0x5f, 0x69, 0x69, // (_srcData ## _ii
	0x2c, 0x20, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x63, 0x6f, 0x6f, // , s_sampler, coo
	0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // rd)
	0x20, 0x5c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  ...
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x77, 0x20, //      * normal.w
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x5c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    ...
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x20, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, //        * native_
	0x70, 0x6f, 0x77, 0x72, 0x28, 0x64, 0x70, 0x2c, 0x20, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, // powr(dp, _specul
	0x61, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x29, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // arPower);
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //      ...
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //         }
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        ...
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       }
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, //          ...
	0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //     }
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x0d, 0x0a, 0x20, 0x20, //            ...
	0x20, 0x20, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x50, 0x52, 0x4f, 0x43, 0x45, //   }....    PROCE
	0x53, 0x53, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x28, 0x30, 0x29, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, // SS_FACE(0);..
	0x20, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x28, 0x31, 0x29, //  PROCESS_FACE(1)
	0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x46, // ;..    PROCESS_F
	0x41, 0x43, 0x45, 0x28, 0x32, 0x29, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x50, 0x52, 0x4f, // ACE(2);..    PRO
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x28, 0x33, 0x29, 0x3b, 0x0d, 0x0a, 0x20, // CESS_FACE(3);..
	0x20, 0x20, 0x20, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x28, //    PROCESS_FACE(
	0x34, 0x29, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, // 4);..    PROCESS
	0x5f, 0x46, 0x41, 0x43, 0x45, 0x28, 0x35, 0x29, 0x3b, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, // _FACE(5);....
	0x20, 0x69, 0x66, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x20, 0x21, 0x3d, 0x20, 0x63, 0x6f, 0x6c, 0x6f, //  if (0.0 != colo
	0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x29, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, // rWeight.w)..
	0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // {..        color
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x20, 0x2f, 0x3d, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x57, // Weight /= colorW
	0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0d, // eight.w;..    }.
	0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, // ...    const int
	0x32, 0x20, 0x64, 0x73, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x20, 0x78, 0x78, 0x2c, 0x20, 0x79, 0x79, // 2 dst = { xx, yy
	0x20, 0x7d, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, //  };..    write_i
	0x6d, 0x61, 0x67, 0x65, 0x66, 0x28, 0x5f, 0x6f, 0x75, 0x74, 0x2c, 0x20, 0x64, 0x73, 0x74, 0x2c, // magef(_out, dst,
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x29, 0x3b, 0x0d, 0x0a, //  colorWeight);..
	0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x2f, 0x2a, 0x20, 0x76, 0x69, 0x6d, 0x3a, 0x20, 0x73, 0x65, 0x74, // }..../* vim: set
	0x20, 0x73, 0x77, 0x3d, 0x34, 0x20, 0x74, 0x73, 0x3d, 0x34, 0x20, 0x65, 0x78, 0x70, 0x61, 0x6e, //  sw=4 ts=4 expan
	0x64, 0x74, 0x61, 0x62, 0x3a, 0x20, 0x2a, 0x2f, 0x0d, 0x0a,                                     // dtab: */..
};
